// Jenkinsfile
String credentialsId = 'awsCredentials'

try {
  stage('Checkout') {
    node {

      checkout scm
      
    }
  }


  stage('Test') {
    node {


    }
  }

  stage('Build') {
    node {


    }
  }


  stage('Push') {
    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
          sh "set +e; cd s3 && terraform init;"
//          sh "${tfHome}/terraform init"
        }
      }
    }

/*    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
        sh 'cd s3 && terraform plan -out=tfplan1 -input=false'
        sh 'cd s3 && terraform plan -input=false'
        sh "${tfHome}/terraform init"
        }
      }
    }
*/
    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
//          sh "set +e; cd s3 && terraform apply -auto-approve -input=false "tfplan1";"
          sh "set +e; cd s3 && terraform apply -auto-approve -input=false;"
//          sh "${tfHome}/terraform init"
        }
      }
    }



    }

   stage('Push Package to S3') {
    node {
      
     sh "aws s3 cp example.zip s3://tf-sls-example/v1.0.0/example.zip"
    }
  }

  // Run terraform init
  stage('Deploy') {
    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
          sh 'cd lambda && terraform init'
//          sh "${tfHome}/terraform init"
        }
      }
    }

  // Run terraform plan
    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
//          sh 'cd lambda && terraform plan -input=false'
//          sh "${tfHome}/terraform plan"
        }
      }
    }

    // Run terraform apply
      node {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: credentialsId,
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          ansiColor('xterm') {
              sh "set +e; cd lambda && terraform apply -var='app_version=1.0.0' -auto-approve -input=false;"
//              sh "${tfHome}/terraform apply -auto-approve"
          }
        }
      }
 }
  
currentBuild.result = 'SUCCESS'
}
catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException flowError) {
  currentBuild.result = 'ABORTED'
}
catch (err) {
  currentBuild.result = 'FAILURE'
  throw err
}
finally {
  if (currentBuild.result == 'SUCCESS') {
    currentBuild.result = 'SUCCESS'
  }
}

